// <auto-generated />
using System;
using Ecommerce.Models.DbModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ecommerce.Migrations
{
    [DbContext(typeof(EcommerceContext))]
    [Migration("20230403133525_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Latin1_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ecommerce.Models.DbModel.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Postalcode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.BrandCategoryMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("Brand_Id");

                    b.Property<int>("CategoryL1Id")
                        .HasColumnType("int")
                        .HasColumnName("Category_L1_Id");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryL1Id");

                    b.ToTable("Brand_Category_Mapping");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProdId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProdId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.CartTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "UserId_CartTable_UK")
                        .IsUnique();

                    b.ToTable("CartTable");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.CategoryLevel1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryL1")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Category_L1");

                    b.HasKey("Id");

                    b.ToTable("Category_Level1");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.CategoryLevel2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryL1Id")
                        .HasColumnType("int")
                        .HasColumnName("Category_L1_Id");

                    b.Property<string>("CategoryL2")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Category_L2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryL1Id");

                    b.ToTable("Category_Level2");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.CategoryLevel3", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryL2Id")
                        .HasColumnType("int")
                        .HasColumnName("Category_L2_Id");

                    b.Property<string>("CategoryL3")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Category_L3");

                    b.HasKey("Id");

                    b.HasIndex("CategoryL2Id");

                    b.ToTable("Category_Level3");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color1")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Color");

                    b.HasKey("Id");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Comment");

                    b.Property<int>("ProdId")
                        .HasColumnType("int")
                        .HasColumnName("Prod_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProdId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.DeliveryBoy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignedHubId")
                        .HasColumnType("int")
                        .HasColumnName("Assigned_Hub_Id");

                    b.Property<int>("UserRoleMappingId")
                        .HasColumnType("int")
                        .HasColumnName("User_Role_Mapping_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleMappingId");

                    b.HasIndex(new[] { "AssignedHubId" }, "Hub_UK")
                        .IsUnique();

                    b.HasIndex(new[] { "Id" }, "UniqueKey")
                        .IsUnique();

                    b.ToTable("DeliveryBoy");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.DeliveryPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeliveryPartnerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Delivery_Partner_Name");

                    b.HasKey("Id");

                    b.ToTable("DeliveryPartners");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.DpHub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DpId")
                        .HasColumnType("int")
                        .HasColumnName("DP_Id");

                    b.Property<string>("HubName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Hub_Name");

                    b.HasKey("Id");

                    b.HasIndex("DpId");

                    b.ToTable("DP_Hubs");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.DpHubAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Address_Line1");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Address_Line2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("DpHubId")
                        .HasColumnType("int")
                        .HasColumnName("DP_Hub_Id");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DpHubId" }, "DP_Hub_Address_UK")
                        .IsUnique();

                    b.ToTable("DP_Hub_Address");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.InventryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductCount")
                        .HasColumnType("int")
                        .HasColumnName("Product_Count");

                    b.Property<int>("ProductDetailId")
                        .HasColumnType("int")
                        .HasColumnName("Product_Detail_Id");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("Warehouse_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetailId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Inventry_Item");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "PaymentId" }, "UK")
                        .IsUnique();

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Order_Items");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.PaymentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("TransectionId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Id");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.Product", b =>
                {
                    b.Property<int>("ProdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Prod_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("Brand_Id");

                    b.Property<int>("CategoryL1id")
                        .HasColumnType("int")
                        .HasColumnName("CategoryL1Id");

                    b.Property<int>("CategoryL2id")
                        .HasColumnType("int")
                        .HasColumnName("CategoryL2Id");

                    b.Property<int>("CategoryL3id")
                        .HasColumnType("int")
                        .HasColumnName("CategoryL3Id");

                    b.Property<string>("ProdDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Prod_Description");

                    b.Property<string>("ProdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Prod_Name");

                    b.HasKey("ProdId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryL1id");

                    b.HasIndex("CategoryL2id");

                    b.HasIndex("CategoryL3id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.ProductDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProdId")
                        .HasColumnType("int")
                        .HasColumnName("Prod_Id");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProdId");

                    b.HasIndex("SizeId");

                    b.ToTable("Product_Detail");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.ProductImage", b =>
                {
                    b.Property<int>("ImgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Img_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<int>("ProdId")
                        .HasColumnType("int")
                        .HasColumnName("Prod_Id");

                    b.HasKey("ImgId");

                    b.HasIndex("ProdId");

                    b.ToTable("Product_Image");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Size1")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Size");

                    b.HasKey("Id");

                    b.ToTable("Size");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryCode")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("Gender_Id");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("Isactive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.UserGender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UserGender");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.UserProductMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProdId")
                        .HasColumnType("int")
                        .HasColumnName("Prod_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("Id");

                    b.HasIndex("ProdId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Product_mapping");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.UserRoleMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Role_Mapping");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Warehouse_Name");

                    b.HasKey("Id");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.WarehouseOrderDetailsMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int")
                        .HasColumnName("Order_Detail_Id");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("Warehouse_Id");

                    b.HasKey("Id");

                    b.HasIndex("OrderDetailId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Warehouse_OrderDetails_Mapping");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "Wishlist_UserId_UK")
                        .IsUnique();

                    b.ToTable("Wishlist");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.WishlistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProdDetailId")
                        .HasColumnType("int")
                        .HasColumnName("Prod_Detail_Id");

                    b.Property<int>("WishlistId")
                        .HasColumnType("int")
                        .HasColumnName("Wishlist_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProdDetailId");

                    b.HasIndex("WishlistId");

                    b.ToTable("Wishlist_Item");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.Address", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Address_User")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.BrandCategoryMapping", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.Brand", "Brand")
                        .WithMany("BrandCategoryMappings")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Brand_Category_Mapping_Brand")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.DbModel.CategoryLevel1", "CategoryL1")
                        .WithMany("BrandCategoryMappings")
                        .HasForeignKey("CategoryL1Id")
                        .HasConstraintName("FK_Brand_Category_Mapping_Category_Level1")
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("CategoryL1");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.Cart", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.CartTable", "CartNavigation")
                        .WithMany("Carts")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK_Cart_Cart")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.DbModel.ProductDetail", "Prod")
                        .WithMany("Carts")
                        .HasForeignKey("ProdId")
                        .HasConstraintName("FK_Cart_Product_Detail")
                        .IsRequired();

                    b.Navigation("CartNavigation");

                    b.Navigation("Prod");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.CartTable", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.User", "User")
                        .WithOne("CartTable")
                        .HasForeignKey("Ecommerce.Models.DbModel.CartTable", "UserId")
                        .HasConstraintName("FK_CartTable_User")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.CategoryLevel2", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.CategoryLevel1", "CategoryL1")
                        .WithMany("CategoryLevel2s")
                        .HasForeignKey("CategoryL1Id")
                        .HasConstraintName("FK_Category_Level2_Category_Level1")
                        .IsRequired();

                    b.Navigation("CategoryL1");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.CategoryLevel3", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.CategoryLevel2", "CategoryL2")
                        .WithMany("CategoryLevel3s")
                        .HasForeignKey("CategoryL2Id")
                        .HasConstraintName("FK_Category_Level3_Category_Level21")
                        .IsRequired();

                    b.Navigation("CategoryL2");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.Comment", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.Product", "Prod")
                        .WithMany("Comments")
                        .HasForeignKey("ProdId")
                        .HasConstraintName("FK_Comments_Products")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.DbModel.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Comments_User")
                        .IsRequired();

                    b.Navigation("Prod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.DeliveryBoy", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.DpHub", "AssignedHub")
                        .WithOne("DeliveryBoy")
                        .HasForeignKey("Ecommerce.Models.DbModel.DeliveryBoy", "AssignedHubId")
                        .HasConstraintName("FK_DeliveryBoy_DP_Hubs")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.DbModel.UserRoleMapping", "UserRoleMapping")
                        .WithMany("DeliveryBoys")
                        .HasForeignKey("UserRoleMappingId")
                        .HasConstraintName("FK_DeliveryBoy_User_Role_Mapping")
                        .IsRequired();

                    b.Navigation("AssignedHub");

                    b.Navigation("UserRoleMapping");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.DpHub", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.DeliveryPartner", "Dp")
                        .WithMany("DpHubs")
                        .HasForeignKey("DpId")
                        .HasConstraintName("FK_DP_Hubs_DeliveryPartners")
                        .IsRequired();

                    b.Navigation("Dp");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.DpHubAddress", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.DpHub", "DpHub")
                        .WithOne("DpHubAddress")
                        .HasForeignKey("Ecommerce.Models.DbModel.DpHubAddress", "DpHubId")
                        .HasConstraintName("FK_DP_Hub_Address_DP_Hubs")
                        .IsRequired();

                    b.Navigation("DpHub");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.InventryItem", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.ProductDetail", "ProductDetail")
                        .WithMany("InventryItems")
                        .HasForeignKey("ProductDetailId")
                        .HasConstraintName("FK_Inventry_Item_Product_Detail")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.DbModel.Warehouse", "Warehouse")
                        .WithMany("InventryItems")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("FK_Inventry_Item_Warehouse")
                        .IsRequired();

                    b.Navigation("ProductDetail");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.OrderDetail", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.Address", "Address")
                        .WithMany("OrderDetails")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_OrderDetails_Address")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.DbModel.PaymentDetail", "Payment")
                        .WithOne("OrderDetail")
                        .HasForeignKey("Ecommerce.Models.DbModel.OrderDetail", "PaymentId")
                        .HasConstraintName("FK_OrderDetails_PaymentDetails")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.DbModel.User", "User")
                        .WithMany("OrderDetails")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_OrderDetails_User")
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.OrderItem", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.OrderDetail", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Order_Items_OrderDetails")
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.Product", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Products_Brand")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.DbModel.CategoryLevel1", "CategoryL1")
                        .WithMany("Products")
                        .HasForeignKey("CategoryL1id")
                        .HasConstraintName("FK_Products_Category_Level1")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.DbModel.CategoryLevel2", "CategoryL2")
                        .WithMany("Products")
                        .HasForeignKey("CategoryL2id")
                        .HasConstraintName("FK_Products_Category_Level2")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.DbModel.CategoryLevel3", "CategoryL3")
                        .WithMany("Products")
                        .HasForeignKey("CategoryL3id")
                        .HasConstraintName("FK_Products_Category_Level3")
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("CategoryL1");

                    b.Navigation("CategoryL2");

                    b.Navigation("CategoryL3");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.ProductDetail", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.Color", "Color")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ColorId")
                        .HasConstraintName("FK_Product_Detail_Color")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.DbModel.Product", "Prod")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProdId")
                        .HasConstraintName("FK_Product_Detail_Products")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.DbModel.Size", "Size")
                        .WithMany("ProductDetails")
                        .HasForeignKey("SizeId")
                        .HasConstraintName("FK_Product_Detail_Size")
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Prod");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.ProductImage", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.Product", "Prod")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProdId")
                        .HasConstraintName("FK_Product_Image_Products")
                        .IsRequired();

                    b.Navigation("Prod");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.User", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.UserGender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_User_UserGender")
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.UserProductMapping", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.Product", "Prod")
                        .WithMany("UserProductMappings")
                        .HasForeignKey("ProdId")
                        .HasConstraintName("FK_User_Product_mapping_Products")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.DbModel.User", "User")
                        .WithMany("UserProductMappings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_User_Product_mapping_User")
                        .IsRequired();

                    b.Navigation("Prod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.UserRoleMapping", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.UserRole", "Role")
                        .WithMany("UserRoleMappings")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_User_Role_Mapping_UserRole")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.DbModel.User", "User")
                        .WithMany("UserRoleMappings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_User_Role_Mapping_User")
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.WarehouseOrderDetailsMapping", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.OrderDetail", "OrderDetail")
                        .WithMany()
                        .HasForeignKey("OrderDetailId")
                        .HasConstraintName("FK_User_Warehouse_OrderDetails_Mapping_OrderDetails")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.DbModel.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("FK_User_Warehouse_OrderDetails_Mapping_Warehouse")
                        .IsRequired();

                    b.Navigation("OrderDetail");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.Wishlist", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.User", "User")
                        .WithOne("Wishlist")
                        .HasForeignKey("Ecommerce.Models.DbModel.Wishlist", "UserId")
                        .HasConstraintName("FK_Wishlist_User")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.WishlistItem", b =>
                {
                    b.HasOne("Ecommerce.Models.DbModel.ProductDetail", "ProdDetail")
                        .WithMany("WishlistItems")
                        .HasForeignKey("ProdDetailId")
                        .HasConstraintName("FK_Wishlist_Item_Product_Detail")
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.DbModel.Wishlist", "Wishlist")
                        .WithMany("WishlistItems")
                        .HasForeignKey("WishlistId")
                        .HasConstraintName("FK_Wishlist_Item_Wishlist")
                        .IsRequired();

                    b.Navigation("ProdDetail");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.Address", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.Brand", b =>
                {
                    b.Navigation("BrandCategoryMappings");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.CartTable", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.CategoryLevel1", b =>
                {
                    b.Navigation("BrandCategoryMappings");

                    b.Navigation("CategoryLevel2s");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.CategoryLevel2", b =>
                {
                    b.Navigation("CategoryLevel3s");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.CategoryLevel3", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.Color", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.DeliveryPartner", b =>
                {
                    b.Navigation("DpHubs");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.DpHub", b =>
                {
                    b.Navigation("DeliveryBoy");

                    b.Navigation("DpHubAddress");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.OrderDetail", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.PaymentDetail", b =>
                {
                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ProductDetails");

                    b.Navigation("ProductImages");

                    b.Navigation("UserProductMappings");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.ProductDetail", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("InventryItems");

                    b.Navigation("WishlistItems");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.Size", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CartTable");

                    b.Navigation("Comments");

                    b.Navigation("OrderDetails");

                    b.Navigation("UserProductMappings");

                    b.Navigation("UserRoleMappings");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.UserGender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.UserRole", b =>
                {
                    b.Navigation("UserRoleMappings");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.UserRoleMapping", b =>
                {
                    b.Navigation("DeliveryBoys");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.Warehouse", b =>
                {
                    b.Navigation("InventryItems");
                });

            modelBuilder.Entity("Ecommerce.Models.DbModel.Wishlist", b =>
                {
                    b.Navigation("WishlistItems");
                });
#pragma warning restore 612, 618
        }
    }
}
